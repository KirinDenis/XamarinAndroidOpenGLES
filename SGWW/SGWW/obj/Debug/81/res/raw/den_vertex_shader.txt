uniform mat4 u_MVPMatrix; 
uniform vec4 u_LightPos; 
attribute vec4 a_Position; 
attribute vec4 a_Color; 
varying vec4 v_Color; 
attribute vec2 a_TextureCoord; 
varying vec2 v_TextureCoord;
attribute vec3 a_Normal; 
void main() 
{ 
	vec3 modelViewVertex = vec3(u_MVPMatrix * a_Position); 
	vec3 modelViewNormal = vec3(u_MVPMatrix * vec4(a_Normal, 0.0)); 
	float distance = length(u_LightPos.xyz - modelViewVertex);
	vec3 lightVector = normalize(u_LightPos.xyz - modelViewVertex); 
	float diffuse = max(dot(modelViewNormal, lightVector), 0.1); 
	diffuse = diffuse * (1.0 / (1.0 + (u_LightPos.w * distance * distance))); 
	v_Color = vec4(diffuse, diffuse, diffuse, diffuse); //Pass the color with light aspect to fragment shader R G B A 
	v_TextureCoord = a_TextureCoord; // Pass the texture coordinate through to the fragment shader. It will be interpolated across the triangle. 
        gl_Position = u_MVPMatrix * a_Position; //  gl_Position is a special variable used to store the final position. Multiply the vertex by the matrix to get the final point in normalized screen coordinates. 
}